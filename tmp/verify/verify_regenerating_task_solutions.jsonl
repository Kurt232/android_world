{"task": "Open an existing note or create a new one if necessary, then show the title of the current note", "solution": "tap($open_note)\nopen_notes = $open_note_title_list\nif len(open_notes) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($text_note_type)\n    tap($add_note_ok)\nelse:\n    tap(open_notes[0])\nnote_title = get_text($item_title)\nprint(note_title)"}
{"task": "Open the checklist containing the item 'Shopping List' and rename the checklist item 'Shopping List' to 'Groceries List'", "solution": "\n# From the current UI state, open the note containing the title \"Shopping List\"\nopen_notes = $open_note_title_list\n\nfor i in range(len(open_notes)):\n    if get_text(open_notes[i]) == 'Shopping List':\n        tap(open_notes[i])\n        break\n\n# Ensuring that the open_note action correctly opened the note and displaying the checklist items\nchecklist_items = $checklist_item_list\nfor j in range(len(checklist_items)):\n    if get_text(checklist_items[j]) == 'Shopping List':\n        long_tap(checklist_items[j])\n        tap($rename_selected_checklist_item)\n        set_text($rename_input, 'Groceries List')\n        tap($rename_ok)\n        break\n    "}
{"task": "Open a checklist note or create one if there is none, then rename the current checklist to 'Grocery List'", "solution": "\n# Check if there are any notes available to open\nif len($open_note_title_list) == 0:\n    # No notes available, create a new checklist note\n    tap($create_note)\n    set_text($add_note_title, 'New Checklist')\n    tap($checklist_type)\n    tap($add_note_ok)\nelse:\n    # Open the first available note\n    tap($open_note_title_list[0])\n\n# Open more options for the current note\ntap($more_options_note)\n\n# Rename the current note to 'Grocery List'\ntap($rename_note)\nset_text($rename_input, 'Grocery List')\ntap($rename_ok)\n    "}
{"task": "Create multiple checklist items and then sort the items of the current checklist by Custom", "solution": "\ntap($open_note)\n\nif len($open_note_title_list) == 0:\n    tap($create_note)\n    tap($checklist_type)\n    tap($add_note_ok)\nelse:\n    tap($open_note_title_list[0])\n\nfor i in range(3):\n    tap($add_checklist_item)\n    set_text($add_checklist_item_title, f'Item {i+1}')\n    tap($add_checklist_item_ok)\n\ntap($more_options_checklist)\ntap($sort_checklist_items)\ntap($custom_type)\ntap($sort_checklist_items_ok)\n    "}
{"task": "Create checklist items, mark some as done, and then remove all done items from the current checklist.", "solution": "back()\nback()\ntap($switch_item)\ntap($add_checklist_item)\nset_text($add_note_title, 'Task 1')\ntap($add_note_ok)\ntap($add_checklist_item)\nset_text($add_note_title, 'Task 2')\ntap($add_note_ok)\ntap($checklist_item[0])\ntap($checklist_item[1])\ntap($more_options_checklist)\ntap($remove_done_checklist_items)"}
{"task": "Ensure that a note titled 'Grocery List' exists and is opened, then print the current note about the grocery list.", "solution": "\n# Since there is no element indicating we are on the notes list or creating a new note, backtrack to the appropriate state\nback()\n\nexists = False\nopen_notes = $open_note_title_list\n# Ensure that open_note_titles is visible\nfor i in range(len(open_notes)):\n    if get_text(open_notes[i]) == 'Grocery List':\n        tap(open_notes[i])\n        exists = True\n        break\n\nif not exists:\n    tap($create_note)\n    set_text($add_note_title, 'Grocery List')\n    tap($text_note_type)\n    tap($add_note_ok)\n\n# Print the content of the current note\nprint(get_text($note_content))"}
{"task": "Open a checklist note or create one if there is none, then confirm the current checklist sorting type", "solution": "if len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'New Checklist')\n    tap($checklist_type)\n    tap($add_note_ok)\nelse:\n    tap($open_note_title_list[0])\ntap($more_options_checklist)\ntap($sort_checklist_items)\nback()"}
{"task": "Ensure a note is open and then delete all text in the current note.", "solution": "tap($open_note)\ntap($open_note_title_list[0])\ntap($note_content)\nset_text($note_content, '')\n"}
{"task": "Open any existing note or create a new note, then enable Incognito mode for keyboards in notes.", "solution": "\nif len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($text_note_type)\n    tap($add_note_ok)\nelse:\n    tap($open_note_title_list[0])\n\ntap($more_options_note)\ntap($settings)\nscroll($scroll_settings_page, 'down')\ntap($set_use_incognito_mode_of_keyboards)\nback()\n"}
{"task": "Open a note, make it the current note, and then search for 'important dates' within the current note.", "solution": "\n# Tap to open the notes list\ntap($open_note)\n\n# Get the list of open note titles\nnotes = $open_note_title_list\n\n# Iterate through the list to find and tap the note with \"important dates\" in the title\nfor i in range(len(notes)):\n    if 'important dates' in get_text(notes[i]):\n        tap(notes[i])\n        break\n\n# Tap the search button within the current note\ntap($search_within_note)\n# Set the search text to 'important dates'\nset_text($search_text, 'important dates')\n"}
{"task": "Open a note (or create one if none exists) and edit the content of the note to say 'Meeting at 10am on Monday'", "solution": "tap($open_note)\n\n# Check if there are any existing note titles\ntitles = $open_note_title_list\nif len(titles) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($text_note_type)\n    tap($add_note_ok)\n    set_text($note_content, 'Meeting at 10am on Monday')\nelse:\n    tap(titles[0])\n    set_text($note_content, 'Meeting at 10am on Monday')"}
{"task": "Open a checklist note if none are currently opened, then move the checklist item 'Read a Book' to the top of the list.", "solution": "\ntap($open_note)\nnotes = $open_note_title_list\nchecklist_found = False\nfor i in range(len(notes)):\n    if 'Checklist' in get_text(notes[i]):\n        tap(notes[i])\n        checklist_found = True\n        break\n\nif checklist_found:\n    if 'Read a Book' in [get_text(item) for item in $checklist_item_list]:\n        checklist_items = $checklist_item_list\n        for i in range(len(checklist_items)):\n            if get_text(checklist_items[i]) == 'Read a Book':\n                long_tap(checklist_items[i])\n                tap($move_selected_item_to_the_top)\n                break\n    else:\n        print('The checklist item Read a Book does not exist')\n"}
{"task": "Create a checklist item 'Clean Room' if it does not exist, then delete the checklist item 'Clean Room'", "solution": "tap($open_note)\n\n# Check if 'Clean Room' exists in the checklist\nchecklist_items = [get_text(item) for item in $checklist_item_list]\nif 'Clean Room' not in checklist_items:\n    tap($add_checklist_item)\n    set_text($add_checklist_item_title, 'Clean Room')\n    tap($add_checklist_item_ok)\n\n# Delete 'Clean Room' item\nfor i in range(len($checklist_item_list)):\n    if get_text($checklist_item_list[i]) == 'Clean Room':\n        long_tap($checklist_item_list[i])\n        tap($delete_selected_checklist_item)\n        break"}
{"task": "Change the theme color of the app to White", "solution": "scroll($scroll_settings_page, \"up\")\ntap($set_colors)\ntap($set_theme_color)\ntap($theme_color_types.match(\"White\"))\ntap($save_set_colors)"}
